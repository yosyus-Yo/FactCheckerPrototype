---
description: 실시간 미디어 콘텐츠 진위 검증 및 AR 시각화 시스템 구현을 위한 AI 자동화 워크플로우 규칙
globs: ["*.py", "*.js", "*.ts", "*.html", "*.css", "*.json", "*.yaml"]
alwaysApply: false
priority: 1
requires: []
---

# FactChecker AI 자동화 워크플로우 규칙

## 프로젝트 개요
- **설계 복잡도**: 높음
- **구현 기간**: 6개월(MVP), 12개월(고도화), 18개월(확장)
- **우선순위 기준**: 의존성 기반, 핵심 인프라 우선

## 구현 전략
- **선택 전략**: 혼합식(Hybrid)
- **선택 이유**: 복잡한 시스템 구조와 다양한 기술 스택의 통합 필요성
- **접근 방법**: 
  - 상향식: 핵심 서비스 모듈별 개발
  - 하향식: 전체 아키텍처 및 인터페이스 설계

## 우선순위 원칙
- **핵심 인프라 우선**: 미디어 처리, 주장 감지 등 기반 시스템 먼저 구축
- **의존성 기반**: 의존관계가 높은 컴포넌트를 우선 개발
- **사용자 경험 중심**: 핵심 기능 구현 후 UX/UI 최적화

## 컴포넌트 구현 순서
| 순서 | 컴포넌트 | 의존성 | 완료 기준 |
|------|----------|--------|-----------|
| 1 | 미디어 처리 서비스 | Google ASR API | 초당 60프레임 분석, 처리 지연 100ms 이내, 다양한 발화 스타일 대응 |
| 2 | 주장 감지 서비스 | 미디어 처리 서비스 | 감지 정확도 85% 이상, 처리 시간 0.3초 이내 |
| 3 | 팩트체크 서비스 | 주장 감지 서비스, 빅카인즈 API, Factiverse Live API, Google Fact Check API | 검증 시간 2초 이내, 최소 3개 독립 소스 확인 |
| 4 | AR 시각화 서비스 | 팩트체크 서비스, WebXR | 0.8초 내 AR 팝업 표시, 비침습적 디자인 |
| 5 | 사용자 인터페이스 | AR 시각화 서비스 | WCAG 2.1 AA 기준 준수, 직관적 조작성 |
| 6 | 데이터 관리 시스템 | 모든 서비스 | GDPR, CCPA, KPIPA 준수, 최소 필요 정보만 저장 |
| 7 | 배포 및 운영 인프라 | 클라우드 서비스 | 클라우드 네이티브 설계, 초기 동시 사용자 1만 명 지원 |

## 병렬 구현 영역
- **그룹 A (핵심 처리)**: 미디어 처리 서비스, 주장 감지 서비스
- **그룹 B (검증 시스템)**: 팩트체크 서비스, 데이터 관리 시스템
- **그룹 C (인터페이스)**: AR 시각화 서비스, 사용자 인터페이스
- **그룹 D (인프라)**: 배포 및 운영 인프라

## 체크포인트
| 체크포인트 | 포함 컴포넌트 | 검증 기준 |
|------------|---------------|-----------|
| CP1 | 미디어 처리, 주장 감지 | 실시간 미디어 분석 정확도 85%, 지연시간 0.4초 이내 |
| CP2 | 팩트체크, 데이터 관리 | 멀티소스 검증 성공률 80%, 데이터 파이프라인 구축 완료 |
| CP3 | AR 시각화, UI | 시각화 렌더링 0.8초 이내, 사용자 만족도 테스트 4.0/5.0 이상 |
| CP4 | 전체 시스템 | 종단간 처리 시간 3초 이내, 시스템 안정성 99.5% 이상 |

## 검증 활동
- **컴포넌트 수준**: 
  - 단위 테스트 및 통합 테스트 자동화
  - 성능 벤치마크 (속도, 정확도, 리소스 사용량)
  - 코드 품질 측정 (정적 분석, 코드 커버리지)
- **통합 수준**: 
  - 전체 서비스 흐름 시뮬레이션
  - 다양한 미디어 콘텐츠 유형 테스트
  - 경계 조건 및 예외 상황 테스트
- **시스템 수준**: 
  - 실사용자 베타 테스트
  - 성능 및 부하 테스트
  - 보안 취약점 검사 및 개인정보 보호 감사

## 설계-코드 일치성 관리
- **추적성 확보**: 
  - 요구사항-설계-코드 매핑 문서 유지
  - 설계 변경 이력 관리
  - 코드 주석에 설계 참조 ID 포함
- **불명확성 해결 프로세스**:
  1. 설계 리뷰 회의 소집
  2. 이해관계자 의견 수렴
  3. 기술 문서 업데이트
  4. 코드 주석 및 문서화 강화

## 진행 상황 관리
- **측정 방법**: 컴포넌트별 완료 기준 달성률, 체크포인트 달성도
- **보고 주기**: 주간 개발 회의, 격주 제품 리뷰, 월간 로드맵 검토
- **상태 표시**: JIRA 칸반 보드, 대시보드 시각화, 진행률 그래프
- **이슈 관리**: 
  - JIRA 이슈 트래킹
  - 우선순위(P0-P3) 및 심각도(S0-S3) 분류
  - 이슈 해결 SLA 설정 (P0: 24시간, P1: 3일, P2: 1주, P3: 2주)

## AI 코드 생성 전략
1. **아키텍처 설계**:
   - 시스템 다이어그램 생성
   - 컴포넌트 인터페이스 정의
   - 데이터 흐름 모델링
   
2. **인터페이스 정의**:
   - API 스펙 작성
   - 데이터 모델 정의
   - 사용자 인터페이스 와이어프레임 생성
   
3. **코어 로직 구현**:
   - 컴포넌트별 핵심 알고리즘 코드 생성
   - 최적화 및 성능 튜닝
   - 코드 품질 검증

4. **테스트 코드 생성**:
   - 단위 테스트 자동 생성
   - 통합 테스트 시나리오 작성
   - 성능 테스트 스크립트 구현

## 인간 피드백 지점
- **아키텍처 검토**: 시스템 설계 완료 후
- **인터페이스 디자인**: UI/UX 프로토타입 생성 후
- **코드 품질 검토**: 주요 컴포넌트 구현 완료 후
- **성능 최적화**: 초기 벤치마크 테스트 후
- **보안 검토**: 주요 기능 구현 완료 후

## 자가 검증 절차
1. **정적 분석**: ESLint, PyLint, TypeScript 타입 체크
2. **단위 테스트 자동화**: Jest, pytest
3. **성능 벤치마크**: 응답 시간, 처리량, 리소스 사용량
4. **코드 커버리지**: 80% 이상 목표
5. **보안 스캔**: OWASP Top 10 취약점 검사

## 문서화 요구사항
- **코드 내 문서화**:
  - 함수 및 클래스 JSDoc/PyDoc 주석
  - 복잡한 알고리즘 단계별 설명
  - 공개 API 인터페이스 문서화
  
- **외부 문서화**:
  - API 참조 문서 (Swagger/OpenAPI)
  - 아키텍처 다이어그램
  - 개발자 가이드
  - 사용자 매뉴얼
  - 배포 및 운영 가이드

## 워크플로우 조정 조건
- **트리거 조건**:
  - 성능 요구사항 미달 (응답 시간 > 3초)
  - 외부 API 변경 (빅카인즈, Google 등)
  - 주요 버그 발견 (사용자 영향 > 10%)
  - 보안 취약점 발견
  
- **조정 절차**:
  1. 영향 분석 및 문서화
  2. 대안 평가 및 제안
  3. 이해관계자 승인
  4. 변경 계획 수립
  5. 구현 및 테스트
  6. 배포 및 모니터링

## MVP 릴리스 기준 (6개월)
- 크롬 확장프로그램 베타 출시
- 유튜브, 네이버TV, 카카오TV 기본 연동
- 빅카인즈 데이터 파이프라인 구축
- 주장 감지 알고리즘 85% 정확도 달성
- 기본 웹 인터페이스 구현

## 고도화 릴리스 기준 (12개월)
- WebXR 기반 AR 인터페이스 구현
- 멀티 API 병렬 처리 시스템 구축
- Edge, Firefox 브라우저 지원 확장
- UI/UX 개선 및 사용자 피드백 반영

## 최종 릴리스 기준 (18개월)
- AI 생성 콘텐츠 감지 모듈 추가
- 방송사 실시간 자막 연동
- B2B API 서비스 출시
- 다국어 지원 확장 (일본어, 중국어)

## 특별 고려사항
- **웹 브라우저 호환성**: Chrome 79+, Edge 79+, Firefox 76+ 필수 지원
- **AR 기술 제한**: WebXR API 지원 브라우저 필요
- **실시간 처리**: 네트워크 지연 고려한 최적화 필요
- **데이터 보호**: GDPR, CCPA, KPIPA 규정 준수
- **API 사용량**: 외부 API 비용 관리 및 할당량 모니터링
