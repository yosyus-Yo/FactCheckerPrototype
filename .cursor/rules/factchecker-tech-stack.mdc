---
description: FactChecker 프로젝트의 기술 스택 및 개발 규칙
globs: ["*.js", "*.ts", "*.jsx", "*.tsx", "*.py", "*.html", "*.css"]
alwaysApply: true
---

# 🚀 FactChecker 기술 스택 및 개발 규칙

## 📌 프로젝트 컨텍스트 정의

- **프로젝트명**: FactChecker
- **프로젝트 설명**: 실시간 미디어 콘텐츠의 사실 주장을 자동으로 감지·검증하고 AR 인터페이스로 시각화하는 시스템
- **프로젝트 단계**: MVP (6개월 개발 일정)
- **핵심 기능**: 
  1. 미디어 처리 서비스: 실시간 웹 콘텐츠 인식 및 텍스트 변환
  2. 주장 감지 서비스: 검증 가능한 사실 주장 자동 식별
  3. 팩트체크 서비스: 다양한 신뢰 소스를 통한 주장 검증
  4. AR 시각화 서비스: 검증 결과의 직관적 시각화
- **예상 사용자**: 일반 대중, 팩트체커, 언론인
- **도메인 특성**: 미디어, 정보 검증, 사실 확인
- **개발 기간**: 초기 6개월 (MVP), 총 18개월 로드맵
- **팀 구성**: 개발자 5명, 디자이너 2명, PM 1명

## 💻 기술 스택 정의

### 1. 프론트엔드
- **프레임워크 및 핵심 라이브러리**: 
  - React 18.x
  - Redux 5.x (상태 관리)
  - TypeScript 5.x
  - WebXR API (AR 구현)
  - **왜**: React는 컴포넌트 기반 아키텍처와 가상 DOM 기능으로 실시간 UI 업데이트에 적합하며, WebXR은 브라우저 기반 AR 구현의 표준입니다.

- **UI/UX 컴포넌트 시스템**:
  - TailwindCSS 3.x
  - Headless UI 및 Radix UI
  - **왜**: 유틸리티 기반 스타일링으로 개발 속도를 높이고, 접근성을 갖춘 컴포넌트 라이브러리로 일관된 UX를 제공합니다.

- **상태 관리 접근법**:
  - Redux Toolkit 2.x
  - React Query 5.x (서버 상태 관리)
  - **왜**: 복잡한 글로벌 상태와 비동기 데이터 흐름을 효율적으로 관리하기 위해 선택했습니다.

- **라우팅 및 네비게이션**:
  - React Router 6.x
  - **왜**: SPA 내비게이션을 위한 안정적인 표준 라이브러리입니다.

- **스타일링 방법론**:
  - CSS-in-JS (Emotion 또는 Styled Components)
  - **왜**: 컴포넌트 중심의 스타일링으로 캡슐화와 동적 스타일링을 지원합니다.

### 2. 백엔드/서버
- **서버 기술 및 프레임워크**:
  - Node.js 20 LTS
  - Express.js 4.x
  - TypeScript 5.x
  - **왜**: 자바스크립트 기반 풀스택 개발의 일관성과 타입 안전성을 제공합니다.

- **API 설계 패턴**:
  - REST API + JSON:API 명세
  - **왜**: 명확하고 표준화된 API 설계로 프론트엔드와의 통합을 용이하게 합니다.

- **데이터 모델링 접근법**:
  - 도메인 주도 설계(DDD)
  - **왜**: 복잡한 비즈니스 로직을 명확하게 모델링하고 유지보수성을 높입니다.

- **인증 및 보안 메커니즘**:
  - OAuth 2.0 + JWT
  - HTTPS 필수
  - **왜**: 산업 표준 인증 프로토콜과 토큰 기반 인증으로 보안성을 확보합니다.

### 3. 데이터베이스
- **데이터베이스 종류 및 버전**:
  - MongoDB 7.x (주요 데이터)
  - Redis 7.x (캐싱, 실시간 데이터)
  - **왜**: 유연한 스키마와 빠른 개발 속도, 캐싱을 통한 실시간 응답 성능을 위해 선택했습니다.

- **스키마 설계 가이드라인**:
  - 문서 지향적 설계
  - 필요한 경우 참조 관계 활용
  - **왜**: NoSQL의 유연성을 최대한 활용하면서도 데이터 무결성을 유지합니다.

- **쿼리 패턴 및 최적화 전략**:
  - 인덱싱 최적화
  - 쿼리 프로젝션 활용
  - **왜**: 대용량 데이터에서도 빠른 응답 시간을 보장하기 위함입니다.

- **마이그레이션 및 버전 관리 방식**:
  - MongoDB Migrations
  - 버전 관리 명세
  - **왜**: 스키마 변경을 안전하게 적용하고 롤백할 수 있는 체계를 마련합니다.

### 4. 클라우드/인프라
- **배포 환경 및 서비스**:
  - AWS (ECS, Lambda, S3, CloudFront)
  - **왜**: 확장성과 안정성이 검증된 클라우드 환경에서 서비스를 운영합니다.

- **CI/CD 파이프라인**:
  - GitHub Actions
  - **왜**: 소스 코드 관리와 통합된 CI/CD로 개발 워크플로우를 간소화합니다.

- **모니터링 및 로깅 솔루션**:
  - AWS CloudWatch
  - Sentry
  - **왜**: 종합적인 인프라 모니터링과 실시간 오류 추적이 가능합니다.

- **스케일링 전략**:
  - 오토스케일링 그룹
  - 서버리스 아키텍처 활용
  - **왜**: 트래픽 변동에 자동으로 대응하고 비용을 최적화합니다.

### 5. 외부 API
- **미디어 데이터 처리**:
  - Google AI Studio Stream Realtime API
  - Google ASR API
  - **왜**: 고품질 음성 인식과 실시간 미디어 처리 기능을 제공합니다.

- **팩트체킹 데이터 소스**:
  - 빅카인즈 API (한국 뉴스 데이터)
  - Factiverse Live API (다국어 팩트체킹)
  - Google Fact Check API
  - **왜**: 다양한 신뢰 소스를 통합하여 검증 정확도를 높입니다.

## 📝 코딩 규칙 및 개발 프로세스

### 1. 코드 구조
- **파일/폴더 구조 및 명명 규칙**:
  - 프론트엔드: 기능별(feature) 폴더 구조 + 공통 컴포넌트
  - 백엔드: 도메인 중심 설계(DDD) 기반 구조
  - 네이밍: 카멜케이스(camelCase) for 변수/함수, 파스칼케이스(PascalCase) for 컴포넌트/클래스
  - **해야 한다(must)**: 지정된 폴더 구조와 네이밍 규칙을 준수해야 합니다.

- **모듈화 및 계층화 전략**:
  - 프론트엔드: 프레젠테이션, 비즈니스 로직, 데이터 액세스 계층 분리
  - 백엔드: 컨트롤러, 서비스, 리포지토리 계층 분리
  - **권장한다(should)**: 관심사 분리 원칙을 적용하여 코드의 유지보수성을 높이세요.

- **코드 조직화 패턴**:
  - 도메인별 기능 조직화
  - **왜**: 도메인별 구성으로 기능 확장과 팀 협업이 용이합니다.

### 2. 코딩 스타일
- **프로젝트 특화 포맷팅 규칙**:
  - ESLint + Prettier 설정 (프로젝트 루트의 구성 파일 사용)
  - **해야 한다(must)**: 코드 커밋 전 린트 및 포맷팅 검사를 통과해야 합니다.

- **주석 및 문서화 표준**:
  - JSDoc 스타일 문서화
  - 복잡한 비즈니스 로직에 주석 필수
  - **권장한다(should)**: 공개 API와 복잡한 함수에 JSDoc 주석을 추가하세요.

- **네이밍 컨벤션**:
  - 변수/함수: camelCase
  - 컴포넌트/클래스: PascalCase
  - 상수: UPPER_SNAKE_CASE
  - **해야 한다(must)**: 일관된 네이밍 컨벤션을 적용해야 합니다.

### 3. 품질 관리
- **코드 리뷰 프로세스**:
  - GitHub Pull Request 기반
  - 최소 1명의 승인 필요
  - **해야 한다(must)**: 모든 코드 변경은 리뷰를 거쳐야 합니다.

- **정적 분석 도구 설정**:
  - SonarQube 또는 CodeClimate
  - **권장한다(should)**: 자동화된 코드 품질 분석을 CI 파이프라인에 통합하세요.

- **성능 기준 및 측정 방법**:
  - 웹 바이탈 지표(LCP, FID, CLS) 모니터링
  - 검증 시간: 2초 이내
  - AR 표시 지연: 0.8초 이내
  - **할 수 있다(may)**: 성능 지표 대시보드를 구축하여 모니터링하세요.

### 4. 협업 워크플로우
- **버전 관리 전략**:
  - GitHub Flow (feature → main)
  - 시맨틱 버저닝
  - **해야 한다(must)**: 브랜치 네이밍 규칙을 준수해야 합니다 (feature/, bugfix/, hotfix/).

- **PR/MR 요구사항**:
  - 명확한 PR 설명
  - 연관된 이슈 링크
  - 테스트 결과 포함
  - **권장한다(should)**: PR 템플릿을 사용하여 일관된 정보를 제공하세요.

- **작업 할당 및 추적 방법**:
  - JIRA 또는 GitHub Projects
  - **할 수 있다(may)**: 주간 스프린트 계획과 일일 스탠드업 미팅으로 진행 상황을 공유하세요.

## 🔄 프로젝트 특화 규칙

### 1. 실시간 처리 최적화
- **성능 중점 영역**:
  - 미디어 스트림 처리 (60fps 목표)
  - AR 렌더링 성능 (최소 지연)
  - **해야 한다(must)**: 성능 병목 지점을 정기적으로 프로파일링하고 최적화해야 합니다.
  - **왜**: 실시간 반응성은 사용자 경험의 핵심 요소입니다.

- **메모리 관리**:
  - 메모리 누수 방지 패턴
  - 가비지 컬렉션 최적화
  - **권장한다(should)**: 대용량 미디어 처리 시 메모리 사용을 모니터링하세요.
  - **왜**: 장시간 사용 시에도 안정적인 성능을 유지해야 합니다.

### 2. AR 시각화 표준
- **WebXR 구현 가이드라인**:
  - 비침습적 디자인 원칙
  - 접근성 고려 (색맹 등)
  - **권장한다(should)**: AR 요소는 사용자의 주요 콘텐츠 시청을 방해하지 않도록 설계하세요.
  - **왜**: AR 요소가 원본 콘텐츠 소비를 방해하면 사용자 경험이 저하됩니다.

- **시각적 포맷 표준**:
  - 신뢰도 색상 코드 (녹색: 사실, 노란색: 부분적 사실, 빨간색: 허위)
  - 확장 가능한 정보 계층 구조
  - **해야 한다(must)**: 정의된 색상 코드와 시각적 표준을 일관되게 적용해야 합니다.
  - **왜**: 일관된 시각적 언어는 사용자의 이해도를 높입니다.

### 3. 팩트체킹 알고리즘 규칙
- **다중 소스 통합 패턴**:
  - 소스별 가중치 적용
  - 신뢰도 계산 알고리즘 표준화
  - **해야 한다(must)**: 최소 3개 이상의 독립 소스를 활용해야 합니다.
  - **왜**: 다양한 소스를 통한 교차 검증으로 정확도를 높입니다.

- **오탐지 방지 메커니즘**:
  - 신뢰도 임계값 설정
  - 불확실성 표시 기준
  - **권장한다(should)**: 낮은 신뢰도의 결과는 적절히 표시하고 사용자에게 알려야 합니다.
  - **왜**: 잘못된 팩트체킹은 사용자 신뢰를 손상시킵니다.

## 📋 예시 코드

### AR 오버레이 컴포넌트
```jsx
import React, { useEffect, useState } from 'react';
import { useWebXR } from '../hooks/useWebXR';
import { TruthIndicator } from './TruthIndicator';

const ARFactOverlay = ({ claim, verificationResult }) => {
  const { initAR, arSession } = useWebXR();
  const [isVisible, setIsVisible] = useState(false);
  
  useEffect(() => {
    if (claim && verificationResult) {
      initAR();
      setIsVisible(true);
    }
  }, [claim, verificationResult]);
  
  return (
    arSession && isVisible && (
      <div className="ar-overlay" style={{ opacity: 0.85 }}>
        <TruthIndicator score={verificationResult.truth_score} />
        <p className="claim-text">{claim.claim_text}</p>
        <button onClick={() => setIsVisible(false)}>닫기</button>
      </div>
    )
  );
};

export default ARFactOverlay;
```

### 다중 소스 팩트체크 서비스
```typescript
import axios from 'axios';

export const verifyClaimWithMultipleSources = async (claim: Claim): Promise<VerificationResult> => {
  const sources = determineOptimalSources(claim);
  
  try {
    // 병렬 API 호출
    const results = await Promise.all(
      sources.map(source => fetchSourceResults(source, claim))
    );
    
    // 결과 통합 및 가중치 부여
    const integratedResult = integrateResults(results, sources);
    
    return {
      claim_id: claim.claim_id,
      verification_result: {
        truth_score: calculateTruthScore(integratedResult),
        verdict: determineVerdict(integratedResult),
        sources: formatSourceInfo(results, sources),
        context_timeline: extractTimeline(results),
        contrary_claims: findContraryClaims(results)
      }
    };
  } catch (error) {
    console.error('Verification failed:', error);
    throw new VerificationError('다중 소스 검증 실패', error);
  }
};
```

## 🔄 진화하는 규칙 체계

### 규칙 평가 및 개선
- **규칙 평가 지표**: 
  - 개발자 피드백 점수 (5점 척도)
  - 규칙 준수율 (린트 통과율)
  - 코드 품질 지표 (정적 분석 결과)
  
- **피드백 수집 방법**:
  - 분기별 개발자 설문조사
  - 코드 리뷰 중 규칙 관련 주석 분석
  
- **규칙 개정 주기**:
  - 마이너 업데이트: 월간
  - 메이저 업데이트: 분기별
  
- **cursorrules와의 동기화 방법**:
  - GitHub Actions 기반 자동 동기화
  - 규칙 충돌 감지 및 알림 시스템
